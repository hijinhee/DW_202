-- 08.29(월)
-- select : 조회할 때 사용
-- select <컬럽이름> from <테이블 이름>
select ename from emp
-- 사원이름, 번호 조회
-- 1개 이상 컬럼을 조회할 때는 ,(콤마) 사용
select ENAME, EMPNO from emp
-- 사원번호, 사원이름, 직책 조회
select EMPNO, ENAME, JOB from emp
-- as (별칭) 임시로 바뀜
select ename as '사원이름', EMPNO as '사원 번호' from emp
-- 모든 컬럼 조회 *(아스테리스크)
select * from emp
-- where (필터링)
-- 20번 부서 사원 모두 조회-
-- 쿼리 순서 - 1.from 2.where 3.select
select * from emp where DEPTNO  = 20
-- job이 manager 인 사원이름, 번호, 직책, 입사날짜 조회하시오
select ename, empno, job, hiredate from emp where job = 'manager'
-- job이 manager, salesman인 사원번호, 사원이름 조회
-- or (||), and(&&)
select empno, ename from emp where job = 'manager' or job = 'salesman'
-- 문제3. 사원이름이 ALLEN인 사원의 이름, 직책, 입사날짜 조회
select ename, job, hiredate from emp where ename = 'allen'
-- 사원 이름이 A로 시작하는 사원의 이름, 사원 번호 조회
-- like : 특정단어를 검색할 수 있다. 
select ename, empno from emp where ename like 'A%'
-- 사원 이름에 L이 두번 들어간 사원 이름, 번호 조회
select ename, empno from emp where ename like '%L%L%'
-- 보너스를 받지 못한 사원의 급여와 번호를 조회
-- null인 사원
select sal, empno from emp where comm is null
-- null 아닌 사원
select sal, empno from emp where comm is not null
-- 입사날짜가 1987-06-28 이상인 사원 이름,번호,직책 조회
-- >=,<=,>,<
select ename, empno, job from emp where HIREDATE >= '1987-06-28'
-- 문제4.입사일이 1980-12-17 ~ 1982-01-23사이에 입사한
-- 사원 이름, 번호, 입사날짜, 직책을 조회하시오.
select ename, empno, hiredate, job from emp where hiredate >='1980-12-17' and hiredate <='1982-01-23'
-- 문제5. 직업이 manager고, 급여가 1300이상 받는 사원번호,이름,급여,직업 조회
select empno, ename, sal, job from emp where job = 'manager' and sal >= 1300
-- avg, count, max, min 함수 (단일행 함수)
-- 직업이 manager인 사원들의 급여 평균 조회
-- 쿼리를 잘 짜면 로직이 줄어든다.
select avg(sal) as '급여 평균', job from emp where job = 'manager'
-- 직업이 clerk인 사원 수 조회
-- *을 자주 쓰면 성능이 느려질수 있음
select count(empno) from emp where job = 'clerk'
-- max
select max(sal) from emp where job = 'clerk'
-- min
select min(sal) from emp where job = 'clerk'
-- 문제6. 입사 날짜가 '1987-06-28' 이상인 사원들의 수와 급여 평균 조회
select count(empno) as '사원수', avg(sal) as '급여 평균' 
from emp where hiredate >= '1987-06-28' 
-- 문제7. 직책이 'manager'가 아닌 사원이름, 직책 조회
select ename, job from emp where job != 'manager'
-- 문제8. 사원 이름이 'scott', 'jones'인 사원의 이름,번호,급여,입사날짜 조회
-- 방법1.
select ename, empno, sal, hiredate 
from emp where ename = 'scott' or ename='jones'
-- 방법2.
select ename, empno, sal, hiredate from emp where ename in('scott','jones')


-- 08.30(화)
-- group by : 특정 컬럼을 그룹핑 하는 SQL 문법
-- SQL 읽는 순서 : from -> where -> group by -> having -> select -> order by
-- job 별로 group by하기
-- group by할 컬럼을 select에도 써주자!
select job as '직책 그룹핑' from emp group by job
-- 입사 날짜로 group by
select hiredate as '입사날짜 그룹핑' from emp group by hiredate
-- 년도별로 입사 날짜를 group by
-- date_format(): SQL 내장 함수, 날짜를 원하는대로 포멧팅 해줌.
-- %Y: year(년도), %m : month(월), %d : day(일)
select date_format(hiredate,'%Y'), count(empno) as '사원수' 
from emp group by date_format(HIREDATE,'%Y')
-- 문제, 부서별로 그룹핑하고 부서인원 수도 출력하시오.
select deptno, count(empno) as '부서인원 수' from emp group by deptno
-- 20번 부서를 제외한 나머지 부서 그룹핑!
select deptno from emp where deptno != 20 group by deptno
-- having : group by된 결과를 필터링 할 때 사용
-- where : 필터링
-- where 조건 안 쓰고 having 으로 쓰기
-- having 과 where 차이점
-- 1. SQL 실행 순서가 다르다.
-- 2. where 조건에 집계함수(count, max, min, avg..)으로 비교 불가능
-- 3. having은 집계함수 비교 가능
select deptno, count(empno) 
from emp 
group by deptno 
having count(empno) >= 4
-- group by된 결과를 필터링하고 싶을 때 사용
-- 문제1. 부서별로 급여 합계를 그룹핑 하시오.(hint: sum)
select deptno, sum(sal) from emp group by deptno  
-- 문제2. 문제 1번에서 급여합계가 5000이상인 부서만 조회
select deptno, sum(sal) from emp group by deptno having sum(sal)>=5000
-- 문제3. 문제 2번에서 10번, 30번 부서 제외 (****and, or 신경 쓸것!!****)
select deptno from emp where deptno =20 group by deptno having sum(sal)>=5000
select deptno from emp where deptno !=10 and deptno !=30 group by deptno
-- 문제4. 입사날짜를 월별로 그룹핑하고 월별 입사자 수를 출력하시오.
select date_format(hiredate,'%m') as '입사 월', count(empno) as '입사 사원수' 
from emp group by date_format(hiredate,'%m') 
-- 문제5. 직책별로 그룹핑하고 직책별 평균 급여를 조회하고, 평균 급여가 1000이 넘는 직책만 출력하시오.
-- 		(단, 직책이 manager는 제외)
select job, avg(sal) 
from emp 
where job != 'manager' 
group by job 
having avg(sal) > 1000 
-- 문제6. 1982년도에 입사한 모든 사원의 정보 조회 (이렇게 쓰는게 맞는건지..잘 모르겠다. 틀림-나는 1982년부터 입사한 사람들이 다 출력됨..ㅜㅜ)
select * from emp where hiredate >= '1982-01-01'
-- 답 
-- '%(찾고자하는 시간)' 찾고자하는 시간에 대소문자 구분함. 어떤걸로 썼느냐에 따라 결과값이 달라짐. date_format()을 검색해보면 자세히 나옴. 
select * from emp where date_format(hiredate, '%Y') = '1982'
select * from emp where date_format(hiredate, '%m') = '04' -- 연습
-- 문제7. 급여가 1500 ~ 2850 사이의 범위에 속하는 사원 이름, 급여, 직책 조회
select ename, sal, job from emp where sal >= 1500 and sal<=2850

-- order by : 특정 컬럼을 정렬할 때 사용(항상 마지막에 사용됨)
-- 아래 쿼리는 오름차순(디폴트 값)
select ename, sal from emp order by sal 
-- 아래 쿼리는 내림차순
select ename, sal from emp order by sal desc
-- 컬럼 위치로 정렬하기.
-- order by는 항상 마지막에 실행되기 때문에 select 컬럼 순서를 알고 있다.
select ename, sal from emp order by 2 desc

-- 총정리
select deptno, count(empno) -- 5
from emp  -- 1
where deptno !=10 -- 2 
group by deptno  -- 3
having count(empno) >=3 -- 4
order by count(empno) desc -- 6

## delete, update, insert
-- delete (데이터 삭제)(한줄 삭제)
-- 삭제할 때는 where 조건으로 삭제하자
delete from emp where 

-- truncate 테이블 안에 있는 데이터를 초기화 시킴.(통으로 날림)
truncate table emp  

-- auto commit을 해제하면 rollback(뒤 돌아가기)으로 돌아갈 수 있음.
-- auto commit이 설정되어 있으면 rollback 명령어 불가능!
-- commit(완전 저장), rollback(이전 상태로 돌아가기)

-- 08.31.(수)
-- join ****
-- 관계형 데이터베이스(MySQL, Oracle, Tibero)를 사용하면 join은 무조건 사용한다.
-- deptno : 부서번호, dname : 부서이름, loc : 부서위치
-- join은 컬럼 이름이 같다고 해서 되는게 아니라, 데이터 타입이 서로 같아야 한다.
-- 컬럼 이름이 같은 이유는 사용자(개발자) 편의성을 위해서 같게 해준다.

-- join 문법
-- 테이블 이름에도 as를 사용할 수 있다.
-- 방법1.
select e.ename, e.deptno, d.dname 
from emp as e 
inner join dept as d on e.deptno = d.deptno
-- 방법2. (추천x) 
-- where 조건으로도 사용할 수 있지만, 
-- where가 나온 목적은 연산자(비교)를 이용해서 필터링을 하는게 목적이다.
-- 때문에 아래 방법보다는 방법1로 join을 사용하자. 
select e.ename, e.deptno, d.dname 
from emp as e, dept as d 
where e.deptno = d.deptno

-- 사원번호가 7788인 사원의 이름,직책,부서번호,부서이름,근무지역을 조회하시오.
-- join tip) 두 테이블 교집합 컬럼을 찾자.
select e.ename, e.job, e.deptno, d.dname, d.loc 
from emp as e 
inner join dept as d 
on e.deptno = d.deptno 
where e.empno = 7788
-- 부서별로 그룹핑을 하고 부서번호와 부서이름을 조회하시오
-- join 문법은 from과 where 사이에 온다.
-- 같은걸 써야할 경우 emp 테이블이든, dept 테이블이든 공통된거 어느거를 써도 상관없다.
select e.deptno, d.dname 
from emp as e 
inner join dept as d 
on e.deptno = d.deptno 
group by e.deptno

-- 직책이 manager인 사원들의 이름, 부서이름, 부서위치를 조회하시오.
select e.ename, d.dname, d.loc 
from emp as e 
inner join dept as d 
on e.deptno = d.deptno 
where e.job = 'manager'
-- inner join(교집합)에서 순서는 상관 없지만,
-- right join과 left join은 상관있다.
select * 
from emp as e 
right join dept as d 
on e.deptno = d.deptno 
where e.job = 'manager'

select * 
from dept as d 
inner join emp as e 

-- left join(차집합), right join(차집합) : 아우터(outer) 조인
-- 40번 부서만 조회
select * from dept where deptno = 40
-- emp 테이블에 없는 부서번호 조회
select * 
from emp as e 
right join dept as d 
on d.deptno = e.deptno

select * 
from dept as d 
left join emp as e 
on d.deptno = e.deptno
-- 40번 부서만 조회
select * 
from dept as d 
left join emp as e 
on d.deptno = e.deptno 
where e.empno is null

select * 
from dept as d 
left join emp as e 
on d.deptno = e.deptno 
where d.deptno = 40

-- self join (inner join하고 같음) - 용어만 self join이지 쓰는건 inner join으로 쓰면 됨.
-- 그러나 자기 자신을 조인함. 즉, 1개 테이블을 사용
-- boss : 상사, underling : 부하
select 
	boss.empno as '상사번호', 
	boss.ename as '상사이름', 
	underling.empno as '부하직원 번호', 
	underling.ename as '부하직원 이름' 
from emp as boss 
inner join emp as underling 
on boss.empno = underling.mgr
-- boss.empno(상사의 사원번호) = underling.mgr(부하의 상사번호)

-- emp에 insert 하기
insert into emp (empno, ename, job, sal, hiredate)
values(8000, '손흥민', 'SALESMAN', 7000, now());

-- ; : 옵션이라 써도 되고, 안 써도 됨

-- 문제. 아우터 조인(left join, right join) 이용하기
-- 부서에 소속되어 있지 않는 사원번호, 이름, 입사날짜 조회
-- 결과 손흥민이 나와야함
select * 
from emp as e 
left join dept as d 
on e.deptno = d.deptno -- 전체 조회

select e.empno, e.ename, e.hiredate 
from emp as e 
left join dept as d 
on d.deptno = e.deptno 
where e.deptno is null

-- 사원번호가 8000인 사원의 급여를 8000으로 업데이트 하시오.
-- delete는 from을 써주고, update는 from을 명시하지 않음
update emp
set sal = 8000 
where empno = 8000

delete from emp 

-- 08.31
1. 사원이름, 사원직책, 사원급여 조회.
select ename, job, sal 
from emp 

2. 사수번호가 7839인 사원 번호, 이름, 입사날짜 조회.
select empno, ename, hiredate 
from emp 
where mgr = 7839

3. 급여가 3000 이하인 사원의 모든 정보 조회.
select * 
from emp 
where sal < 3000

4. 사원이름, 부서번호, 부서이름, 부서 근무지 조회.
select e.ename, e.deptno, d.dname, d.loc 
from emp as e 
inner join dept as d 

5. 부서별 급여합계, 부서이름 조회. 
select sum(e.sal), d.dname 
from emp as e 
inner join dept as d 
on e.deptno = d.deptno 
group by d.dname 

6. 부서 근무지가 NEW YORK이고, 직책이 MANAGER인 사원의 이름, 급여를 조회. 
select e.ename, e.sal 
from emp as e 
inner join dept as d 
on e.deptno = d.deptno
where d.loc = 'NEW YORK' and e.job = 'MANAGER'

7. 1983년 이후 입사한 사원의 보너스가 null (????????) 
   이면 100 주고, 사원의 이름, 부서이름, 직업을 조회. (ifnull 검색하기)
select ifnull(comm, 100) as '보너스 치환 값',
	e.ename as '사원명', 
	d.dname as '부서 이름', 
	e.job as '직업'
from emp as e 
left join dept as d 
on e.deptno = d.deptno
where date_format(hiredate, '%Y') >= 1983

8.  부서명이 RESEARCH인 사원의 이름, 급여, 근무 지역 조회.
select e.ename, e.sal, d.loc
from emp as e 
inner join dept as d
on e.deptno = d.deptno
where d.dname = 'RESEARCH'

9. 보너스를 받은 사원 이름, 직책, 급여, 부서명 조회. (join 쓴 다음에 on 잊지말고 쓰자!)
select e.ename, e.job, e.sal, d.dname 
from emp as e 
inner join dept as d 
on e.deptno = d.deptno 
where comm

10. 이름 첫글 A자를 가진 사원 이름, 직책, 부서명, 부서 위치 조회. (like 빼먹지말자)
select e.ename, e.job, d.dname, d.loc 
from emp as e 
inner join dept as d 
where e.ename like 'A%'

11. 사원명, 사수번호, 사수 이름 조회. (join 쓴 다음에 on 잊지말고 쓰자!)
   단, 사수가 없는 사원도 포함
select
	underling.ename as '사원명',
	underling.mgr as '사수 번호',
	boss.ename as '상사 이름' 
from emp as boss 
right join emp as underling
on boss.empno = underling.mgr 


12. 사원명, 사수번호, 사수 이름 조회.
   단, 사수가 없는 사원만
select
	underling.ename as '사원명',
	underling.mgr as '사수 번호',
	boss.ename as '상사 이름' 
from emp as boss right join emp as underling
on boss.empno = underling.mgr 
where underling.mgr is null

13. 상사번호가 7698인 사원의 이름, 사원번호, 상사번호, 상사이름 조회.
select 
	underling.ename as '부하 이름', 
	underling.empno as '부하 사원번호', 
	underling.mgr as '상사번호', 
	boss.ename as '상사 이름' 
from emp as boss 
inner join emp as underling 
on boss.empno = underling.mgr 
where underling.mgr = 7698

14. 상사보다 먼저 입사한 사원의 사원이름, 사원의 입사일, 상사 이름, 상사 입사일 조회. (좀더 공부를 해봐야겠다..)
select
	underling.ename as '사원명',
	underling.hiredate as '사원 입사일',
	boss.ename as '상사이름',
	boss.hiredate as '상사 입사일'
from emp as boss
inner join emp as underling
on boss.empno = underling.mgr
where boss.hiredate > underling.hiredate


15. 업무가 MANAGER이거나 CLERK고 입사날짜가 1982년에 입사한
 사원의 사원번호, 이름, 급여, 직업, 부서명 조회.
select 
	e.empno, 
	e.ename, 
	e.sal, 
	e.job, 
	d.dname 
from emp as e 
inner join dept as d 
where e.job in('manager','clerk') 
and date_format(hiredate, '%Y')

16. 부서별 급여 총합 조회. 
    단, 사원이 존재하지 않는 부서도 포함해서 급여 순으로 내림차순 하시오.
select deptno as '부서별', sum(sal) 
from emp 
group by deptno 
having sum(sal)
order by sal desc
    
17.  사원 이름, 상사 이름, 사원 부서번호, 사원 부서명, 사원 근무지역 조회. (명확히 모르겠다) 
    단, 사원이 존재하지 않는 부서번호와 부서명도 조회. -- dept에 없는 손흥민 때문에 union을 써서 한번 더 씀.
select
	underling.ename as '사원명',
	boss.ename as '상사 이름', 
	d.deptno as '사원 부서 번호',
	d.dname as '사원 부서명',
	d.loc as '사원 근무지역'
from emp as boss
right join emp as underling
on boss.empno = underling.mgr
right join dept as d
on underling.deptno = d.deptno
union
select
	underling.ename as '사원명',
	boss.ename as '상사 이름', 
	d.deptno as '사원 부서 번호',
	d.dname as '사원 부서명',
	d.loc as '사원 근무지역'
from emp as boss
right join emp as underling
on boss.empno = underling.mgr
left join dept as d
on underling.deptno = d.deptno

-- select empno, ename, deptno, null from emp *union을 쓸때위치는 동일하게 해주고,
-- union										데이터 값만 다르게
-- select null, null, deptno, dname from dept


18. 부서 위치가 CHICAGO이고 사수 급여가 5000 미만인
 사원 번호,사원 이름,사수 번호, 사수 이름, 사수 급여, 부서명을 조회.
 단, 사원의 입사날짜로 오름차순.
select
	underling.empno as '사원 번호',
	underling.ename as '사원명',
	underling.mgr as '사수 번호',
	boss.ename as '사수 이름',
	boss.sal as '사수 급여',
	d.dname as '부서명'
from emp as boss right join emp as underling
on boss.empno = underling.mgr
inner join dept as d
on boss.deptno = d.deptno
where d.loc = 'chicago' and boss.sal < 5000
order by underling.hiredate

19. 입사날짜를 월별로 몇명이 입사했는지 카운트해서 조회.
select 
	date_format(hiredate,'%m') as '입사 월', 
	count(empno) as '입사 사원수' 
from emp 
group by date_format(hiredate,'%m')
order by date_format(hiredate,'%m')


-- 22.09.01(목)
-- join 복습
select * from emp as e
inner join dept as d 
on e.deptno = d.deptno

-- outer join 
-- 내가 찾고자 하는 정보를 갖고 있는 테이블 이름 때문에 left, right를 써주는 것이다.
select * 
from emp as e 
right join dept as d 
on e.deptno = d.deptno
where e.empno is null 

-- self join
-- junior:사원, senior:사수
select 
	junior.empno as '부하 번호',
	junior.ename as '부하 이름',
	senior.empno as '사수 번호',
	senior.ename as '사수 이름'
from emp as junior
inner join emp as senior 
on junior.mgr = senior.empno

-- sql 순서
-- 1. from 1.5.join 2.where 3.group by 4.having 
-- 5. select 6. order by

-- delete from emp e 
-- 

-- null 하고 문자 'null' 하고는 다른거!
-- is null, is not null

-- pk는 중복 허용 X (auto index)
-- fk는 중복이 가능 (index 없음)

insert into dept(deptno, dname, loc)
values (20, 'DW아카데미','대전 선화동')
-- 위 SQL은 dept 테이블에 20번 부서가 이미 있으므로 에러 발생

-- tip) 자주 조회하는 컬럼 일수록 위에다 정의를 해야함.
-- now 현재 시간을 알려줌.
select now

-- 전체 사원의 사원번호, 사원 이름, 부서 이름을 모두 출력하시오.
-- 실행하고 싶은 쿼리 마우스 드래그 -> Ctrl + Enter
select e.empno, e.ename, d.dname 
from emp as e 
inner join dept as d
on e.deptno = d.deptno

-- 사원 수, 평균 급여, 부서 수, 보너스 합

-- 사원 수 조회 하는 쿼리 작성하시오!
select count(empno) as '사원수'
from emp 

-- 평균 급여 조회 
select avg(sal)
from emp

-- 부서 수 조회
select count(deptno)
from dept

-- 보너스 합 조회
select sum(comm) 
from emp 


-- 서브 쿼리(메인 쿼리 안에 서브 쿼리가 옴): 고급 쿼리 중 하나
-- 서브 쿼리란? 하나의 쿼리 문장 내에 포함된 또 하나의 쿼리 문장.
-- 서브 쿼리가 오는 위치(== 많이 사용하는 위치)
-- 1. select (스칼라 서브 쿼리)
-- 2. from (***인라인 뷰)
-- 3. where (중첩 서브 쿼리)

select
	count(empno) as 'empCount',
	(select avg(sal) from emp) as 'empSalAvg',
	(select count(deptno) from dept) as 'deptCount',
	(select sum(comm) from emp) as 'empCommSum'
from emp 

-- 쿼리 작성하기
select e.empno, e.ename, emp.job, emp.sal
from emp as e
inner join dept as d
on e.deptno = d.deptno

-- 사원 수정
update emp 
set 
	ename = '이강인',
	job = 'MANAGER',
	sal = 500,
	comm = 300
where empno = 100



alter table emp add column is_use bool
-- DML : SELECT, INSERT, UPDATE, DELETE(NOT-AUTO COMMIT)
-- DDL : ALTER, DROP, CREATE(AUTO COMMIT)

-- 컴퓨터는 1:true, 2:false 로 인식

update emp 
set is_use = true 

select count(*)
from emp 
where is_use = true;

-- 가입된 사원 찾기
select count(*) 
from emp 
where empno = 300

SELECT d.DEPTNO, d.DNAME, d.loc, count(e.DEPTNO) AS '사원 수'
FROM dept AS d
LEFT JOIN emp AS e
ON e.DEPTNO = d.DEPTNO 
GROUP BY e.DEPTNO 

SELECT 
			d.DEPTNO, 
			d.DNAME, 
			d.loc, 
			count(IF(e.is_use=1, e.is_use, NULL)) AS people
		FROM dept AS d
		LEFT JOIN emp AS e
		ON e.DEPTNO = d.DEPTNO 
		GROUP BY e.DEPTNO 
		ORDER BY e.DEPTNO

-- 부모 테이블 delete (참조키 제공)
DELETE FROM dept 
WHERE deptno = 30

-- 부모테이블에 있는 데이터를 삭제하고 싶으면 CASCADE 설정을 해야한다. 

-- 자식 테이블 delete (참조키 사용)
DELETE FROM emp
WHERE deptno = 30


CREATE TABLE A (
	idx int(4) NOT NULL PRIMARY KEY COMMENT 'PK 아이디',
	create_at datetime DEFAULT current_timestamp comment '생성날짜'
)

CREATE TABLE B (
	b_idx int(4) NOT NULL PRIMARY KEY COMMENT 'B테이블 PK',
	a_idx int(4) COMMENT 'A테이블 FK',
	FOREIGN KEY(a_idx) REFERENCES A(idx) ON DELETE CASCADE 
)

INSERT INTO a (idx) VALUES (1)
INSERT INTO a (idx) VALUES (2)
INSERT INTO a (idx) VALUES (3)

-- 1 ~ 4
-- why?
INSERT INTO b (b_idx, a_idx) VALUES (1, 3)
INSERT INTO b (b_idx, a_idx) VALUES (2, 3)

DELETE FROM a 
WHERE idx = 3;


-- 밑에 5가지를 다 기억하면 좋다. 하지만, 다 기억하지 못할 경우 1, 2번을 기억해두자.

-- *** ON DELETE CASCADE : 부모 테이블에 데이터를 지우면, 
-- 참조하고 있는 자식 테이블 데이터도 모두 지워진다.

-- *** ON DELETE SET NULL : 부모 테이블에 데이터를 지우면, 
-- 참조하고 있는 자식 테이블에 컬럼이 null로 변경된다.

-- ON DELETE RESTRICT(DEFAULT) : 부모 테이블 데이터를 지울 때,
-- 자식 테이블에서 데이터를 참조하고 있다면, 삭제, 변경 불가능

-- ON DELETE NO ACTION : 부모 테이블에서 데이터를 지우면, 
-- 자식 테이블에 아무런 영향을 받지 않는다.

-- ON DELETE SET DEFAULT : 부모 테이블에서 데이터를 지울 때,
-- 참조하고 있는 자식테이블 컬럼이 DEFAULT 값으로 변경된다.


-- 부서 목록 삭제 : 구글링을 해서 EMP테이블에서 ON DELETE 설정 추가하는 법 검색해서 적용하기
-- 우리는 부서는 삭제하고 사원 정보를 남기기 위해서 저걸 설정하는 것임!
-- ON DELETE는 관계형 데이터베이스만 존재(Oracle, MySQL, MariaDB...)

-- emp 테이블에 적힌 잘못된 정보를 지우기 위해 썼다.
DELETE FROM emp WHERE empno = 50

SELECT count(*),deptno  FROM emp 
GROUP BY deptno

-- 로그 테이블 생성하기
-- AUTO_INCREMENT 자동으로 값이 1씩 증가
CREATE TABLE emp_logs(
	log_id bigint(20) AUTO_INCREMENT PRIMARY KEY COMMENT '로그번호',
	ip varchar(50) COMMENT '사용자 아이피',
	url varchar(100) COMMENT '접속 경로',
	http_method varchar(10) COMMENT 'http method',
	create_at DATETIME COMMENT '접속 시간'
)

CREATE TABLE IF NOT EXISTS DEPT (
    DEPTNO DECIMAL(2),
    DNAME VARCHAR(14),
    LOC VARCHAR(13),
    CONSTRAINT PK_DEPT PRIMARY KEY (DEPTNO) 
);

CREATE TABLE IF NOT EXISTS EMP (
    EMPNO DECIMAL(4),
    ENAME VARCHAR(10),
    JOB VARCHAR(9),
    MGR DECIMAL(4),
    HIREDATE DATE,
    SAL DECIMAL(7,2),
    COMM DECIMAL(7,2),
    DEPTNO DECIMAL(2),
    IS_USE tinyint(1) DEFAULT true,
    CONSTRAINT PK_EMP PRIMARY KEY (EMPNO),
    CONSTRAINT FK_DEPTNO FOREIGN KEY (DEPTNO) REFERENCES DEPT(DEPTNO) ON DELETE SET NULL
);

CREATE TABLE IF NOT EXISTS SALGRADE ( 
    GRADE TINYINT,
    LOSAL SMALLINT,
    HISAL SMALLINT 
);

INSERT INTO DEPT VALUES (10,'ACCOUNTING','NEW YORK');
INSERT INTO DEPT VALUES (20,'RESEARCH','DALLAS');
INSERT INTO DEPT VALUES (30,'SALES','CHICAGO');
INSERT INTO DEPT VALUES (40,'OPERATIONS','BOSTON');
INSERT INTO EMP VALUES (7369,'SMITH','CLERK',7902,STR_TO_DATE('17-12-1980','%d-%m-%Y'),800,NULL,20,true);
INSERT INTO EMP VALUES (7499,'ALLEN','SALESMAN',7698,STR_TO_DATE('20-2-1981','%d-%m-%Y'),1600,300,30,true);
INSERT INTO EMP VALUES (7521,'WARD','SALESMAN',7698,STR_TO_DATE('22-2-1981','%d-%m-%Y'),1250,500,30,true);
INSERT INTO EMP VALUES (7566,'JONES','MANAGER',7839,STR_TO_DATE('2-4-1981','%d-%m-%Y'),2975,NULL,20,true);
INSERT INTO EMP VALUES (7654,'MARTIN','SALESMAN',7698,STR_TO_DATE('28-9-1981','%d-%m-%Y'),1250,1400,30,true);
INSERT INTO EMP VALUES (7698,'BLAKE','MANAGER',7839,STR_TO_DATE('1-5-1981','%d-%m-%Y'),2850,NULL,30,true);
INSERT INTO EMP VALUES (7782,'CLARK','MANAGER',7839,STR_TO_DATE('9-6-1981','%d-%m-%Y'),2450,NULL,10,true);
INSERT INTO EMP VALUES (7788,'SCOTT','ANALYST',7566,STR_TO_DATE('13-7-1987','%d-%m-%Y')-85,3000,NULL,20,true);
INSERT INTO EMP VALUES (7839,'KING','PRESIDENT',NULL,STR_TO_DATE('17-11-1981','%d-%m-%Y'),5000,NULL,10,true);
INSERT INTO EMP VALUES (7844,'TURNER','SALESMAN',7698,STR_TO_DATE('8-9-1981','%d-%m-%Y'),1500,0,30,true);
INSERT INTO EMP VALUES (7876,'ADAMS','CLERK',7788,STR_TO_DATE('13-7-1987', '%d-%m-%Y'),1100,NULL,20,true);
INSERT INTO EMP VALUES (7900,'JAMES','CLERK',7698,STR_TO_DATE('3-12-1981','%d-%m-%Y'),950,NULL,30,true);
INSERT INTO EMP VALUES (7902,'FORD','ANALYST',7566,STR_TO_DATE('3-12-1981','%d-%m-%Y'),3000,NULL,20,true);
INSERT INTO EMP VALUES (7934,'MILLER','CLERK',7782,STR_TO_DATE('23-1-1982','%d-%m-%Y'),1300,NULL,10,true);

COMMIT;

-- insert 컬럼 이름 명시하는 문법
-- ex)INSERT INTO emp(empno) VALUES(2000)
-- 컬럼이름을 명시하는 insert는 다른 컬럼들 생략 가능
-- 단, 다른 컬럼들이 NOT NULL 이라면 그 컬럼은 넣어야함. 

-- insert 컬럼이름 생력 문법
-- INSERT INTO emp values(2000)
-- 해당 테이블 데이터 모두 입력해야함.
INSERT INTO emp(dname, ) VALUES()

INSERT INTO emp_logs(create_at) VALUES(NOW())

SELECT 
			log_id AS logId,
			ip,
			url,
			http_method AS httpMethod,
			create_at AS createAt		
		FROM emp_logs	